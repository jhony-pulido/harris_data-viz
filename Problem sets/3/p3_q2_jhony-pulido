<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <!-- set styles on the top -->
    <style>
        .chart-container {
            max-width: 1050px;
            margin: 0 auto;
            font-family: 'Franklin Gothic Medium', Arial, sans-serif;
        }

        svg {
            overflow: visible;
            height: 570px;
            width: 945px;
        }

        h1 {
           font-family: georgia;
           font-style: italic;
           font-weight: bold;
           margin-left: 200px;

        }

        h2.subheader {
            font-weight: normal;
            font-family: Arial;
            font-size: 20px;
            fill: #333333;
            margin-left: 200px;
        }

        .labels {
            font-size: 20px;
            font-family: "Arial";
        }

        .labels-uninsured {
            font-size: 20px;
            font-family: "Arial";
            fill: white;
        }

        .axis-label {
            font-family: Arial;
        }
        
        .xaxis{
            font-size: 15px;
        }

        .yaxis{
            font-size: 15px;
        }

    .source{
        position: absolute;
        max-width: 1000px;
        text-anchor: left;
        font-family: Arial;
        color: #999999;
        font-size: 13px;
        text-align: left;
        margin-left: 100px;
        margin-top: -8px;
    }

    </style>
</head>

<body>
    <div class="chart-container">
        <h1 class="headline">
            Obamacare, in Its First Big Test as <br>
            Safety Net, Is Holding Up So Far
        </h1>
        
        <h2 class="subheader">
            Job losses and the loss of insurance have typically gone <br> hand in hand. This year, more Americans are staying covered
        </h2>
        <svg width="1050px" height="900px">

        </svg>

        <p class="source"> 
            Note: The income measure used here is disposable income, which is defined as market income plus cash <br> transfers from the government and  <!-- -->
            noncash benefits like food stamps and public housing. It excludes taxes, <br> out-of-pocket medical spending, insurance premiums and other expenses. <!-- --> 
             There have been small changes in <br> the census questionnaire between the two survey dates. Source: Current Population Survey, analysis by Matt <br> Brunig
        </p>
    </div>
</body>

<script src="https://d3js.org/d3.v6.min.js"></script>
<!-- we're using d3 version 6 (the latest version) for all out work -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-legend/2.25.6/d3-legend.min.js"></script>
<script>
// Define width and height:
let width = 950;
let height = 500;

// Define the svg:
let svg = d3.select("body").select("svg")
//Define margins
let margin = {top: 30, right: 20, bottom: 10, left: 0};

// Start with the chart. 
d3.csv("healthcare-disposable-inc.csv").then(function (data){  //load data
    console.log(data) //make sure the data was correctly uploaded
    
    // Specify relevant variables/* :
    data.forEach(function(row){
        row.Percentile = +row.Percentile //x-axis: income percentile
        row.Medicaid = +row.Medicaid //y-axis group 1: % insured by Medicaid
        row.Medicare = +row.Medicare //y-axis group 2: % insured by Medicare
        row.Military = +row.Military //y-axis group 3: % insured by the military
        row.Other = +row.Other //y-axis group 4: % insured by other sources
        row['Subsidized Exchange'] = +row['Subsidized Exchange']  //y-axis group 5: % insured by subsidized exchange
        row.Uninsured = +row.Uninsured //y-axis group 6: % uninsured
        row['Direct Purchase'] = +row['Direct Purchase'] //y-axis group 7: % insured by direct purchase
        row.Employer = +row.Employer //y-axis group 8: % insured by their employers
        row.CHIP = +row.CHIP //y-axis group 9: % insured by CHIP
    })

    // Filter to keep only year 2020
    let d2020 = data.filter(d => d.year ==2020)
    console.log(d2020)

    //X-axis:
    let x = d3.scaleLinear() //re-scaling to pixels:
        .domain(d3.extent(data.map(function (d){
            return (d.Percentile)
        })))
        .range([margin.left, width - margin.right])
    
    let xAxisSettings = d3.axisBottom(x) //defining settings
        .tickValues([5,10,20,30,40,50,60,70,80,90,95])
        .tickSize(10)
        .tickFormat(d3.format(".0f"))
    
    let xAxisTicks = svg.append("g") //appending the x-axis to the SVG
        .attr("class","xaxis")
        .call(xAxisSettings)
        .call(g => g.selectAll(".domain").remove())
        .attr("transform", `translate(0,${height - margin.bottom})`)

    //Since we are going to do a stacked chart, we need to define the use stacked data 
    //before defining the y-axis:

    //Define the columns that will be stacked in the order that we prefer
    let cols = [
        "Medicaid",
        "Medicare",
        "Medicare+Medicaid",
        "Employer",
        "Uninsured",
        "Direct Purchase",
        "Subsidized Exchange",
        "CHIP",
        "Military",
        "Other"
    ]
    
    //In order to assign a different color to each category, we first define colors
    let colors = [
        "#f44336", // "Medicaid",
        "#FF9800", // "Medicare",
        "#FDD835", // "Medicare+Medicaid",
        "#FFF8E1", // "Employer",
        "#26A68A",  // "Uninsured"
        "#4DD0E1", // "Direct Purchase",
        "#F06292", // "Subsidized Exchange",
        "#5C6BC0", // "CHIP",
        "#90A4AE", // "Military",
        "#E0E0E0", // "Other",
    ]
    
    //Then, we define a color function
    let chart_colors = d3.scaleOrdinal()
        .domain(cols)  //domain: the groups
        .range(colors) //range: the colors

    //Generate the stacked data
    let series2020 = d3.stack()
        .keys(cols) //the keys (unique ID for each group)
        (d2020); //the input data
    
        console.log(series2020)

    //Y-axis:
    let y = d3.scaleLinear()
        .domain([0,1])
        .range([height - margin.bottom, margin.top])

    let yAxisSettings = d3.axisLeft(y)
        .tickValues([.2,.4,.6,.8])
        .tickSize(10)
        .tickFormat(d3.format(".0%"))
    
    let yAxisTicks = svg.append("g")
        .attr("class","yaxis")
        .call(yAxisSettings)
        .call(g => g.selectAll(".domain").remove())

    //Define the area function
    let area = d3.area()
        .x(function(d){
            return x(d.data.Percentile)  //x-axis
        })
        //Since we are using stacked data, the beginning and end of every group is determined by the stacked data
        .y0(function(d){
            //console.log(y(d[1]))
            return y(d[0])
        })  
        .y1(function(d){
            return y(d[1])
        })

    //Append the chart:
    svg.append("g")
        //we are going to create a different path for each group-percentile
        .selectAll("path")
        .data(series2020) 
        .join("path")
        .attr("class", function(d){
            return d.key
        })
        .attr("d", area)
        .attr("fill", function(d){
            return chart_colors(d.key)
        })

    
    //Append labels for some categories:
    svg.append("text")
        .attr("class","labels") //setting a class allows changing elements to all like font size in the CSS section
        .attr("x",60)  //set manually the location of labels. The chart is 900 px width x 500 height
        .attr("y", 450)
        .text("Medicaid")
    
    svg.append("text")
        .attr("class","labels")
        .attr("x",60)  
        .attr("y", 300)
        .text("Medicare")

    svg.append("text")
        .attr("class","labels")
        .attr("x",700)
        .attr("y", 200)
        .text("Employer")

    svg.append("text")
        .attr("class","labels-uninsured")
        .attr("x",200)
        .attr("y", 115)
        .text("Uninsured")
        .attr("color","blue")

    svg.append("text")
        .attr("class","labels")
        .attr("x",950)
        .attr("y",80)
        .text("Direct Purchase")
        .style("font-size", 15)

    //Append additional annotation for x-axis labels
    svg.append("text")
        .attr("class","axis-label")
        .attr("x", width/2) //put it in the middle
        .attr("y", height + 40)
        .text("INCOME PERCENTILE")
        .attr("text-anchor", "middle") //ensures that it is in the middle of the SVG
        .attr("font-size", 13)

    svg.append("text")
        .attr("class","axis-label")
        .attr("x", width/1.12) //put it in the middle
        .attr("y", height + 40)
        .text("HIGHER INCOME")
        .attr("text-anchor", "middle") //ensures that it is in the middle of the SVG
        .attr("font-size", 13)
        
    svg.append("text")
        .attr("class","axis-label")
        .attr("x", width/10) //put it in the middle
        .attr("y", height + 40)
        .text("LOWER INCOME")
        .attr("text-anchor", "middle") //ensures that it is in the middle of the SVG
        .attr("font-size", 13)

    svg.append("text")
        .attr("class","year")
        .attr("x", margin.left + 32) //put it in the middle
        .attr("y", margin.top)
        .text("2020")
        .attr("text-anchor", "middle") //ensures that it is in the middle of the SVG
        .attr("font-size", 30)
        .attr("font-family","Arial")

    //Filtered database to use for the legend
    let data_legend = series2020.filter(d => d.key =="Medicare+Medicaid"||
                                             d.key =="Subsidized Exchange"||
                                             d.key == "Military"||
                                             d.key == "CHIP"||
                                             d.key == "Other")
    console.log(data_legend)

    let colors_legend = [
        "#FDD835", // "Medicare+Medicaid",
        "#4DD0E1", // "Subsidized Exchange",
        "#F06292", // "Military",
        "#5C6BC0", // "CHIP",
        "#90A4AE", // "Other",
    ]

    let cols_legend = [
        "Medicare and Medicaid",
        "Subsidized Exchange",
        "Military",
        "CHIP",
        "Other",
    ]
    
    let dataL = 0;
    let offset = 10;
    let begin_h = -422 //beginning of the legend x-axis
    let begin_v = 10  //beginning of the legend y-axis

    let legend = svg.append("g")
        .attr("class", "legend")
        .attr("x", width - 500)
        .attr("y", height - 500)
        .attr("height", height - 50)
        .attr("width", 900)
        .selectAll('g').data(data_legend)
        .enter()
        .append('g')
        .attr("transform", function (d, i) {
                console.log(i)
                if (i === 0) {
                    return "translate(" + (begin_h) +"," + (begin_v) + ")"
                    } else {
                        if (i === 1) {
                        console.log(d.key.length)
                        var newdataH = begin_h + 160
                        begin_h = newdataH
                        var newdataV = begin_v + -25
                        begin_v = newdataV
                        return "translate(" + (newdataH) + "," + (newdataV) + ")"    
                    } else {
                        if (i === 2) {
                            var newdataH = begin_h + 150
                            begin_h = newdataH
                            var newdataV = begin_v + -25
                            begin_v = newdataV
                            return "translate(" + (newdataH) + "," + (newdataV) + ")"  
                        } else {
                            if (i===3) {
                                var newdataH = begin_h + 65
                                begin_h = newdataH
                                var newdataV = begin_v + -25
                                begin_v = newdataV
                                return "translate(" + (newdataH) + "," + (newdataV) + ")"  
                            } else {
                                var newdataH = begin_h + 55
                                begin_h = newdataH
                                var newdataV = begin_v + -25
                                begin_v = newdataV
                                return "translate(" + (newdataH) +  "," + (newdataV) + ")"
                             }   
                        }
                    }
                } 
            })
        .each(function(d, i) {
            let g = d3.select(this);
            g.append("rect")
            .attr("x", width - 65)
            .attr("y", i*25)
            .attr("width", 15)
            .attr("height", 15)
            .style("fill", colors_legend[(i)]);

            g.append("text")
            .attr("x", width - 48)
            .attr("y", i * 25 + 12)
            .attr("height",30)
            .attr("width",100)
            .attr("font-weight", "normal")
            .style("opacity", 0.8)
            .text(cols_legend[i])
            .style("font-size",13)
            .style("font-family", "Arial");

        })
      console.log(data_legend)        
})

</script>
